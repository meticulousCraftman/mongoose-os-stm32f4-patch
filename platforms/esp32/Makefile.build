MAKEFLAGS += --warn-undefined-variables --silent
.DEFAULT_GOAL := all

ifdef MGOS_VARS_FILE
include $(MGOS_VARS_FILE)
endif

APP ?= mongoose-os
APP_PLATFORM = esp32
APP_CFLAGS ?=
APP_CXXFLAGS ?=
APP_CONF_SCHEMA ?=
APP_EXTRA_SRCS ?=
APP_VERSION ?=
APP_BUILD_ID ?=
FFI_SYMBOLS ?=
# List of app source files, globs are supported
APP_SOURCES ?=
# List of include dirs, in addition to dirs from APP_SOURCES
APP_INCLUDES ?=
# List of app files to put into the device's filesystem, globs are supported
APP_FS_FILES ?=
# List of static libs (.a) which are parts of the app
APP_BIN_LIBS ?=
# Extra parts to include in firmware
APP_EXTRA_FW_PARTS ?=
# Override some settings in SDKCONFIG, e.g. to disable FOO and enable BAR:
# ESP_IDF_SDKCONFIG_OPTS = "CONFIG_FOO= CONFIG_BAR=y"
ESP_IDF_SDKCONFIG_OPTS ?=
# Extra components of ESP-IDF to enable during build
ESP_IDF_EXTRA_COMPONENTS ?=
# Extra flash partition definition.
# ESP_IDF_EXTRA_PARTITION="fs_ext,data,spiffs,,256K"
# Partition will be placed after all other mOS partitions.
ESP_IDF_EXTRA_PARTITION ?=
ESP_IDF_EXTRA_PARTITION_2 ?=

MGOS_UPDATE_BOOT_LOADER ?= false

MGOS_DEBUG_UART ?= 0
MGOS_ROOT_DEVTAB ?=
MGOS_ROOT_FS_TYPE ?= SPIFFS
MGOS_ROOT_FS_SIZE ?= 262144

export MGOS_ROOT_FS_SIZE

APP_FS_DIRS = $(sort $(dir $(APP_FS_FILES)))

MGOS_PATH ?= ../..
include $(MGOS_PATH)/tools/mk/mgos_common.mk

APP_PATH := $(CURDIR)
MGOS_ESP_PATH ?= $(MGOS_PATH)/platforms/esp32
MGOS_ESP_SRC_PATH ?= $(MGOS_PATH)/platforms/esp32/src

BUILD_DIR ?= $(CURDIR)/.build
FS_STAGING_DIR = $(BUILD_DIR)/fs
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/firmware
GEN_DIR ?= $(BUILD_DIR)/gen

export APP_SLOT_SIZE ?= 0x180000
FS_IMG = $(FW_STAGING_DIR)/fs.img
export ESP_IDF_EXTRA_PARTITION
export ESP_IDF_EXTRA_PARTITION_2
export NVS_ADDR ?= 0x9000
export NVS_SIZE ?= 0x4000
export APP_OFFSET ?= 0x10000
export OTA_DATA_ADDR ?= 0xd000
export OTA_DATA_SIZE = 0x2000
MAP_FILE = $(BUILD_DIR)/$(APP).map

# Absolutize all paths which can be given by the caller
override APP_SOURCES := $(abspath $(APP_SOURCES))
override APP_INCLUDES := $(abspath $(APP_INCLUDES))
override APP_FS_FILES := $(abspath $(APP_FS_FILES))
override APP_BIN_LIBS := $(abspath $(APP_BIN_LIBS))
override APP_CONF_SCHEMA := $(abspath $(APP_CONF_SCHEMA))
override APP_EXTRA_SRCS := $(abspath $(APP_EXTRA_SRCS))
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
override MGOS_PATH := $(abspath $(MGOS_PATH))
override _MGOS_PATH = $(MGOS_PATH)
# It seems to be impossible to override vars passed to submake from the
# command line, so we pass them via a separate set of varoables, which
# submake then uses to override the values it received.
export APP
export APP_BUILD_ID
export APP_CFLAGS
export APP_CXXFLAGS
export _APP_CONF_SCHEMA = $(APP_CONF_SCHEMA)
export _APP_EXTRA_SRCS = $(APP_EXTRA_SRCS)
export _APP_FS_FILES = $(APP_FS_FILES)
export _APP_BIN_LIBS = $(APP_BIN_LIBS)
export APP_PATH
export APP_PLATFORM
export _APP_SOURCES = $(APP_SOURCES)
export _APP_INCLUDES = $(APP_INCLUDES)
export APP_VERSION
export _BUILD_DIR = $(BUILD_DIR)
export FFI_SYMBOLS
export _FS_FILES = $(FS_FILES)
export _FW_DIR := $(FW_DIR)
export _GEN_DIR := $(GEN_DIR)
export MGOS_DEBUG_UART
export MGOS_SRC_PATH
export MGOS_INCLUDE_PATH
export MGOS_ESP_PATH
export MGOS_ESP_SRC_PATH
export _MGOS_PATH

export BUILD_INFO_JSON = $(GEN_DIR)/build_info.json

MGOS_FEATURES =
MGOS_CONF_SCHEMA =
FS_FILES =

include $(MGOS_PATH)/tools/mk/mgos_features.mk

export MGOS_SRCS
export MGOS_FEATURES
export MGOS_CONF_SCHEMA
export MGOS_IPATH

include $(MGOS_PATH)/tools/mk/mgos_mkfs.mk

# Flags for other component builds go here.
CFLAGS += -Wall -Werror -pipe -mtext-section-literals \
          -I$(MGOS_PATH) -I$(MGOS_SRC_PATH) -I$(MGOS_INCLUDE_PATH) \
          $(APP_CFLAGS) $(addprefix -I ,$(APP_INCLUDES)) \
          -DMGOS_ROOT_DEVTAB='$(MGOS_ROOT_DEVTAB)' \
          -DMGOS_ROOT_FS_TYPE='$(MGOS_ROOT_FS_TYPE)' \
          -DMGOS_ROOT_FS_OPTS='$(MGOS_ROOT_FS_OPTS)' \
          -DMGOS_ROOT_FS_EXTRACT='$(MGOS_ROOT_FS_EXTRACT)'
CXXFLAGS += -pipe $(APP_CXXFLAGS) $(addprefix -I ,$(APP_INCLUDES))

# Settings for the ESP-IDF build system
# See docs here:
#   https://github.com/espressif/esp-idf/blob/master/docs/build_system.rst

PROJECT_NAME = $(APP)
BUILD_DIR_BASE = $(BUILD_DIR)

COMPONENT_DIRS = $(APP_PATH)/components \
                 $(IDF_PATH)/components \
                 $(MGOS_ESP_PATH) \
                 $(MGOS_PATH)/third_party \
                 /opt
# Explicitly specify SDK components to build.
SDK_COMPONENTS = app_trace app_update bootloader bootloader_support cxx driver efuse espcoredump \
                 esp_adc_cal esp_event esp32 esp_ringbuf esptool_py ethernet expat freertos heap \
                 log lwip micro-ecc newlib nvs_flash partition_table pthread soc \
                 spi_flash smartconfig_ack tcpip_adapter vfs wpa_supplicant xtensa-debug-module

MGOS_MAIN_COMPONENT ?= mosapp

COMPONENTS = $(SDK_COMPONENTS) $(MGOS_MAIN_COMPONENT) spiffs $(ESP_IDF_EXTRA_COMPONENTS)

ESPFLASHMODE = qio
ESPFLASHSIZE = 4MB
ESPBAUD = 1500000

SDKCONFIG = $(GEN_DIR)/sdkconfig
BATCH_BUILD = 1

PARTITION_TABLE_CSV_PATH = $(MGOS_ESP_PATH)/src/partitions_mgos.csv

include $(IDF_PATH)/make/project.mk

$(SDKCONFIG): $(MGOS_ESP_PATH)/sdkconfig $(MANIFEST_FINAL)
	mkdir -p $(dir $@)
	cp $(MGOS_ESP_PATH)/sdkconfig $@
	for kv in $(ESP_IDF_SDKCONFIG_OPTS); do echo $$kv >> $@; done

# Override defconfig and menuconfig, they don't work properly in our environment.
defconfig menuconfig:
	true

LDFLAGS += -L$(BUILD_DIR)/src

FW_PARTS = boot:type=boot,addr=0x1000,src=$(BOOTLOADER_BIN),encrypt=true,update=$(MGOS_UPDATE_BOOT_LOADER) \
           pt:type=pt,addr=$(PARTITION_TABLE_OFFSET),src=$(PARTITION_TABLE_BIN),encrypt=true \
           nvs:type=nvs,addr=$(NVS_ADDR),size=$(NVS_SIZE),fill=0xff,encrypt=false \
           otadata:type=otadata,addr=$(OTA_DATA_OFFSET),size=$(OTA_DATA_SIZE),src=$(MGOS_ESP_PATH)/otadata.bin,encrypt=true \
           app:type=app,addr=$(APP_OFFSET),ptn=app_0,src=$(APP_BIN),encrypt=true \
           fs:src=$(FS_IMG),type=fs,ptn=fs_0,fs_size=$(MGOS_ROOT_FS_SIZE) \
           $(APP_EXTRA_FW_PARTS)

include $(MGOS_PATH)/tools/mk/mgos_fw_meta.mk

all: $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR) $(FW_ZIP)

FS_FILES += $(GEN_DIR)/conf0.json

$(FW_DIR) $(FW_STAGING_DIR) $(GEN_DIR):
	$(vecho) "MKDIR $@"
	$(Q) mkdir -p $@

app-bin-check: $(APP_BIN)
	$(eval _appsize := $(shell ls -1 -l $(APP_BIN) | awk '{print $$5}'))
	$(eval _appslotsize := $(shell echo $$(($(APP_SLOT_SIZE)))))
	$(eval _appsizepct := $(shell echo $$(($(_appsize) * 100 / $(_appslotsize)))))
	$(vecho) "  App size: $(_appsize) of $(_appslotsize) ($(_appsizepct)%)"
	[ $(_appsize) -lt $(_appslotsize) ] || { echo App is too big && exit 1; }

$(FW_MANIFEST): app-bin-check $(BOOTLOADER_BIN) $(PARTITION_TABLE_BIN) $(FS_IMG) $(MKFS)

# Deprecated since 2019/05/14.
# This can be deleted eventually. For now we keep the file so during OTA previous one gets overwritten
# and some space is freed.
$(GEN_DIR)/conf0.json: all_binaries
	$(Q) echo '{}' > $@

$(FS_IMG): $(MKFS) $(APP_FS_DIRS) $(FS_FILES)
	$(call mkfs,$(MGOS_ROOT_FS_SIZE),$(MGOS_ROOT_FS_OPTS))

clean:
	rm -rf $(BUILD_DIR) $(FW_DIR)
