MAKEFLAGS += --warn-undefined-variables
.DEFAULT_GOAL := all

.PHONY: all clean

ifdef MGOS_VARS_FILE
include $(MGOS_VARS_FILE)
endif

MGOS_ENABLE_DEBUG_UDP = 0

MGOS_PATH ?= ../../..

APP ?= mongoose-os
APP_PLATFORM = stm32
APP_CFLAGS ?=
APP_EXTRA_SRCS ?=
FFI_SYMBOLS ?=

# List of app source files, globs are supported
APP_SOURCES ?=
# List of include dirs, in addition to dirs from APP_SOURCES
APP_INCLUDES ?=
# List of app files to put into the device's filesystem, globs are supported
APP_FS_FILES ?=
# List of static libs (.a) which are parts of the app
APP_BIN_LIBS ?=
# Extra parts to include in firmware
APP_EXTRA_FW_PARTS ?=
# Bootloader path
MGOS_BL_BIN ?=
# Normally boot loader is not updated during OTA update.
# The firmware built with this flag set to true will, when used for OTA,
# will reflash the boot loader as well.
MGOS_UPDATE_BOOT_LOADER ?= false

MGOS_MG_NET_IF ?= MG_NET_IF_NULL

BUILD_LIB_NAME ?= lib.a

# Get list of dirs which contain sources and filesystem files
APP_SOURCE_DIRS = $(sort $(dir $(APP_SOURCES)))
APP_FS_DIRS = $(sort $(dir $(APP_FS_FILES)))

APP_PATH := $(CURDIR)
MGOS_PLATFORM_PATH ?= $(MGOS_PATH)/platforms/stm32

# Value of the external high-speed crystal in Hz, if present.
# If set to 0, internal RC oscillator is used.
HSE_VALUE ?= 0
# Value of the 32 KHz crystal. If present, set to 32768.
LSE_VALUE ?= 0
# Internal oscillator frequency. Set for each device.
HSI_VALUE ?= 0

STM32_LIBC ?= -lc -lstdc++
STM32_CFLAGS = -DSTM32 -D__WORDSIZE=32 -D_FILE_OFFSET_BITS=32
STM32_IPATH =
STM32_VPATH =
STM32_SRCS =

# If it's a known device, it will define family other settings.
ifneq ("$(DEVICE)", "")
include $(MGOS_PLATFORM_PATH)/mk/devices/$(DEVICE).mk
endif
ifneq ("$(FAMILY)", "")
include $(MGOS_PLATFORM_PATH)/mk/$(FAMILY).mk
else
$(error Please, specify FAMILY. Possible values are stm32f4, stm32f7 and stm32l4)
endif

STM32_CFLAGS += -DHSE_VALUE=$(HSE_VALUE) \
                -DHSI_VALUE=$(HSI_VALUE) \
                -DLSE_VALUE=$(LSE_VALUE)

MGOS_CFLAGS += -DMGOS_VFS_DEFINE_LIBC_REENT_API \
               -DMGOS_VFS_DEFINE_LIBC_DIR_API \
               -DMGOS_VFS_DEFINE_DIRENT

MGOS_DEBUG_UART ?= 1

include $(MGOS_PATH)/tools/mk/mgos_common.mk
include $(MGOS_PATH)/tools/mk/mgos_features.mk

BUILD_DIR ?= $(CURDIR)/.build
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/fw
GEN_DIR ?= $(BUILD_DIR)/gen

# Absolutize all paths which can be given by the caller
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
override BUILD_DIR := $(abspath $(BUILD_DIR))
override MGOS_BL_BIN := $(abspath $(MGOS_BL_BIN))

APP0_ELF = $(BUILD_DIR)/$(APP).elf
APP0_BIN = $(BUILD_DIR)/$(APP).bin
FLASH_SIZE ?= 0
SRAM_BASE_ADDR ?= 0x20000000
SRAM2_BASE_ADDR ?= 0
SRAM2_SIZE ?= 0
FLASH_BASE_ADDR ?= 0x8000000

ifneq "$(MGOS_BL_BIN)" ""
FLASH_FS_OFFSET = $(shell echo $$(($(FLASH_BL_SIZE) + $(FLASH_BL_CFG_SIZE))))
LD_SCRIPT ?= $(LD_SCRIPT_OTA_0)
FLASH_BL_SIZE ?= 32768
FLASH_BL_CFG_SIZE ?= $(FLASH_S0_SIZE)
MGOS_CFLAGS += -DMGOS_BL_ENABLE
else
FLASH_FS_OFFSET = $(FLASH_S0_SIZE)
LD_SCRIPT ?= $(LD_SCRIPT_NO_OTA)
FLASH_BL_SIZE ?= 0
FLASH_BL_CFG_SIZE ?= 0
endif
MGOS_ROOT_DEVTAB ?= fs0 stm32flash {"offset": $(FLASH_FS_OFFSET), "size": $(MGOS_ROOT_FS_SIZE), "ese": true}
MGOS_ROOT_FS_TYPE ?= SPIFFS
MGOS_ROOT_FS_SIZE ?= 0
MGOS_ROOT_FS_ON_SYS_FLASH ?= 1
# When FS is not on sys flash, we definitely need to extract.
MGOS_ROOT_FS_EXTRACT ?= 1-$(MGOS_ROOT_FS_ON_SYS_FLASH)
FS_STAGING_DIR = $(BUILD_DIR)/fs

FS_IMG = $(FW_STAGING_DIR)/fs.bin
FS_ZIP = $(FW_STAGING_DIR)/fs.zip

BL_BIN_C = $(GEN_DIR)/bl_bin.c
FS_IMG_C = $(GEN_DIR)/fs_img.c
FS_ZIP_C = $(GEN_DIR)/fs_zip.c
ifeq "$(MGOS_ROOT_FS_ON_SYS_FLASH)" "1"
  FLASH_FS_SIZE = $(MGOS_ROOT_FS_SIZE)
else
  FLASH_FS_SIZE = 0
endif

include $(MGOS_PATH)/tools/mk/mgos_mkfs.mk

MGOS_LIB = $(BUILD_DIR)/mongoose-os.a
BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_O = $(BUILD_DIR)/build_info.c.o
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c
MG_BUILD_INFO_O = $(BUILD_DIR)/mg_build_info.c.o
MGOS_CONFIG_C = $(GEN_DIR)/mgos_config.c
MGOS_RO_VARS_C = $(GEN_DIR)/mgos_ro_vars.c
GENFILES_FLAG = $(GEN_DIR)/genfiles.done
GENFILES_LIST = $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C)
SYMBOLS_DUMP = $(GEN_DIR)/symbols_dump.txt
FFI_EXPORTS_C = $(GEN_DIR)/ffi_exports.c

MGOS_SRCS += $(notdir $(MGOS_CONFIG_C)) $(notdir $(MGOS_RO_VARS_C)) \
             mgos_config_util.c mgos_core_dump.c mgos_event.c mgos_gpio.c \
             mgos_hw_timers.c mgos_sys_config.c \
             mgos_time.c mgos_timers.c cs_crc32.c cs_file.c cs_hex.c \
             json_utils.c frozen.c mgos_uart.c cs_rbuf.c mgos_init.c \
             mgos_dlsym.c mgos_file_utils.c mgos_system.c mgos_utils.c \
             arm_exc_top.S arm_exc.c arm_nsleep100.c \
             stm32_entry.c stm32_gpio.c \
             stm32_hal.c stm32_hw_timers.c \
             stm32_libc.c \
             stm32_main.c stm32_uart.c \
             error_codes.cpp status.cpp

STM32_IPATH += $(STM32CUBE_PATH)/Drivers/CMSIS/Include

STM32_CFLAGS += -DSTM32_SRAM_BASE_ADDR=$(SRAM_BASE_ADDR) -DSTM32_SRAM_SIZE=$(SRAM_SIZE) \
                -DSTM32_SRAM2_BASE_ADDR=$(SRAM2_BASE_ADDR) -DSTM32_SRAM2_SIZE=$(SRAM2_SIZE) \
                -DSTM32_FLASH_BASE_ADDR=$(FLASH_BASE_ADDR) -DSTM32_FLASH_SIZE=$(FLASH_SIZE) \
                -DSTM32_FLASH_BL_SIZE=$(FLASH_BL_SIZE) \
                -DMGOS_ROOT_DEVTAB='$(MGOS_ROOT_DEVTAB)' \
                -DMGOS_ROOT_FS_TYPE='$(MGOS_ROOT_FS_TYPE)' \
                -DMGOS_ROOT_FS_OPTS='$(MGOS_ROOT_FS_OPTS)' \
                -DMGOS_ROOT_FS_EXTRACT='$(MGOS_ROOT_FS_EXTRACT)' \
                -DNOCACHE_SIZE=0x400 \
                -DMG_LOCALS

IPATH = $(sort $(APP_SOURCE_DIRS) $(APP_INCLUDES)) \
        $(MGOS_PLATFORM_PATH)/include $(MGOS_IPATH) $(GEN_DIR) $(STM32_IPATH)

VPATH = $(MGOS_VPATH) $(MGOS_PLATFORM_PATH)/src \
        $(GEN_DIR) $(APP_SOURCE_DIRS) $(STM32_VPATH)

APP_SRCS := $(notdir $(foreach m,$(APP_SOURCES),$(wildcard $(m)))) $(APP_EXTRA_SRCS)
APP_BIN_LIB_FILES := $(foreach m,$(APP_BIN_LIBS),$(wildcard $(m)))

C_CXX_FLAGS = -Os -ggdb -MD -Wall -Wextra -Werror -pipe \
              -fno-common -ffunction-sections -fdata-sections \
              -DMGOS_APP=\"$(APP)\" \
              -DFW_ARCHITECTURE=$(APP_PLATFORM) \
              $(MGOS_CFLAGS) $(MGOS_FEATURES) \
              $(MG_FEATURES_TINY) -DMG_ENABLE_DIRECTORY_LISTING \
              -DMG_NET_IF=$(MGOS_MG_NET_IF) \
              -include mgos_iram.h \
              $(STM32_CFLAGS)

CFLAGS = -std=gnu99 $(C_CXX_FLAGS) $(APP_CFLAGS)
CXXFLAGS = -std=gnu++11 -fno-exceptions $(C_CXX_FLAGS) $(APP_CXXFLAGS)

LDFLAGS += -Wl,--defsym=SRAM_BASE_ADDR=$(SRAM_BASE_ADDR) -Wl,--defsym=SRAM_SIZE=$(SRAM_SIZE) \
           -Wl,--defsym=SRAM2_BASE_ADDR=$(SRAM2_BASE_ADDR) -Wl,--defsym=SRAM2_SIZE=$(SRAM2_SIZE) \
           -Wl,--defsym=FLASH_BASE_ADDR=$(FLASH_BASE_ADDR) -Wl,--defsym=FLASH_SIZE=$(FLASH_SIZE) \
           -Wl,--defsym=FLASH_S0_SIZE=$(FLASH_S0_SIZE) \
           -Wl,--defsym=FLASH_BL_SIZE=$(FLASH_BL_SIZE) \
           -Wl,--defsym=FLASH_BL_CFG_SIZE=$(FLASH_BL_CFG_SIZE) \
           -Wl,--defsym=FLASH_FS_SIZE=$(FLASH_FS_SIZE) \
           -Wl,--defsym=NOCACHE_SIZE=0x400

LDFLAGS += -Wl,--gc-sections

FW_PARTS = app:type=app0,src=$(APP0_BIN),addr=$(FLASH_BASE_ADDR),bl_size=$(FLASH_BL_SIZE),bl_cfg_size=$(FLASH_BL_CFG_SIZE),fs_size=$(FLASH_FS_SIZE),update_bl=$(MGOS_UPDATE_BOOT_LOADER)
ifeq "$(FLASH_FS_SIZE)$(MGOS_ROOT_FS_EXTRACT)" "01-1"
FW_PARTS += fs:type=fs,src=$(FS_IMG)
endif
FW_PARTS += $(APP_EXTRA_FW_PARTS)

MGOS_OBJS = $(addprefix $(BUILD_DIR)/,$(MGOS_SRCS:=.o))
STM32_OBJS = $(addprefix $(BUILD_DIR)/,$(STM32_SRCS:=.o))
APP_OBJS = $(addprefix $(BUILD_DIR)/,$(APP_SRCS:=.o))
BL_BIN_O = $(addprefix $(BUILD_DIR)/,$(notdir $(BL_BIN_C:=.o)))
FS_IMG_O = $(addprefix $(BUILD_DIR)/,$(notdir $(FS_IMG_C:=.o)))
FS_ZIP_O = $(addprefix $(BUILD_DIR)/,$(notdir $(FS_ZIP_C:=.o)))
FFI_EXPORTS_O = $(addprefix $(BUILD_DIR)/,$(notdir $(FFI_EXPORTS_C:=.o)))

include $(MGOS_PATH)/tools/mk/mgos_fw_meta.mk

AR = arm-none-eabi-ar
CC = arm-none-eabi-gcc
CXX = arm-none-eabi-g++
NM = arm-none-eabi-nm
OC = arm-none-eabi-objcopy

all: $(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR) $(APP0_BIN) $(FW_ZIP)

$(FW_MANIFEST): $(APP0_BIN) $(MGOS_CONFIG_C) $(BUILD_INFO_C) $(MG_BUILD_INFO_C)

$(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR):
	$(vecho) "MKDIR $@"
	$(Q) mkdir -p $@

$(MGOS_LIB): $(MGOS_OBJS)
	$(vecho) "AR    $@"
	$(Q) $(AR) cru $@ $^

# lib.a, used during lib release build.
$(BUILD_DIR)/$(BUILD_LIB_NAME): $(BUILD_DIR) $(APP_OBJS)
	$(vecho) "AR    $@"
	$(AR) cru $@ $(APP_OBJS)

$(BUILD_DIR)/%.c.o: %.c $(GENFILES_FLAG)
	$(vecho) "CC    $<"
	$(vecho) "$(CFLAGS)" > "$(DEVICE)_build_vars.txt" 
	$(vecho) "$(addprefix -I, $(IPATH))" > "$(DEVICE)_ipath.txt" 
	$(Q) cd $(dir $<) && $(CC) $(CFLAGS) $(addprefix -I, $(IPATH)) -c $(notdir $<) -o $@

$(BUILD_DIR)/%.cpp.o: %.cpp $(GENFILES_FLAG)
	$(vecho) "CXX   $<"
	$(Q) cd $(dir $<) && $(CXX) $(CXXFLAGS) $(addprefix -I, $(IPATH)) -c $(notdir $<) -o $@

$(BUILD_DIR)/%.S.o: %.S $(GENFILES_FLAG)
	$(vecho) "ASM   $<"
	$(Q) $(CC) $(CFLAGS) $(addprefix -I, $(IPATH)) -c -x assembler-with-cpp $< -o $@

$(GENFILES_FLAG): $(GENFILES_LIST)
	$(Q) touch $@

BIN_PARTS = $(APP_OBJS) $(FFI_EXPORTS_O) $(BUILD_INFO_O) $(MG_BUILD_INFO_O) $(MGOS_LIB) $(STM32_OBJS) $(APP_BIN_LIB_FILES)
ifeq "$(MGOS_ROOT_FS_ON_SYS_FLASH)" "1"
  BIN_PARTS += $(FS_IMG_O)
else
  BIN_PARTS += $(FS_ZIP_O)
endif
ifneq "$(MGOS_BL_BIN)" ""
  BIN_PARTS += $(BL_BIN_O)
endif

$(APP0_ELF): $(BIN_PARTS) $(LD_SCRIPT)
	$(vecho) "LD    $@ (BL=$(notdir $(MGOS_BL_BIN)) LDS=$(notdir $(LD_SCRIPT)))"
	$(Q) $(CC) $(CFLAGS) $(LDFLAGS) \
	  -Wl,-Map=$@.map -Wl,--start-group $(BIN_PARTS) $(STM32_LIBC) -lgcc -lnosys -Wl,--end-group \
	  -T$(LD_SCRIPT) -o $@

$(APP0_BIN): $(APP0_ELF)
	$(vecho) "BIN   $@"
	$(Q) $(OC) -Obinary -R .boot_state $^ $@
	$(vecho) "  Code: $$($(OC) -Obinary -j .text $^ /dev/fd/1 | wc -c)"
	$(vecho) "  Data: $$($(OC) -Obinary -j .rodata $^ /dev/fd/1 | wc -c) + $$($(OC) -Obinary -j .data $^ /dev/fd/1 | wc -c)"

include $(MGOS_PATH)/tools/mk/mgos_build_info.mk
include $(MGOS_PATH)/tools/mk/mgos_ffi_exports.mk
include $(MGOS_PATH)/tools/mk/mgos_config.mk

MGOS_CONF_SCHEMA += $(MGOS_PLATFORM_PATH)/stm32_sys_config.yaml

$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(APP_OBJS) $(MGOS_OBJS) $(FFI_EXPORTS_O)
	$(call gen_build_info,$@,$(APP_PATH),$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C): $(MGOS_OBJS)
	$(call gen_build_info,$@,$(MGOS_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

$(MGOS_CONFIG_C): $(MGOS_CONF_SCHEMA) $(MANIFEST_FINAL)

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)

$(FS_IMG): $(APP_FS_DIRS) $(FS_FILES) $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C) $(MKFS)
	$(call mkfs,$(MGOS_ROOT_FS_SIZE),$(MGOS_ROOT_FS_OPTS))

$(FS_ZIP): $(FS_IMG)
	$(Q) rm -f $@
	$(Q) cd $(FS_STAGING_DIR) && zip -9 -r $@ .

$(FS_ZIP_C): $(FS_ZIP)
	$(vecho) "GEN   $@"
	$(Q) $(FW_META_CMD) xxd --var_name fs_zip --const $(FS_ZIP) > $@

$(FS_IMG_C): $(FS_IMG)
	$(vecho) "GEN   $@"
	$(Q) $(FW_META_CMD) xxd --var_name fs_img --const --section .fs_img $(FS_IMG) > $@

$(BL_BIN_C): $(MGOS_BL_BIN)
	$(vecho) "GEN   $@"
	$(Q) $(FW_META_CMD) xxd --var_name bl_bin --const --section .bl_bin $(MGOS_BL_BIN) > $@

$(FFI_EXPORTS_C): $(FS_FILES)
	$(call gen_ffi_exports,$@,$(FFI_SYMBOLS),$(filter %.js,$(FS_FILES)))

# In ffi exports file we use fake signatures: void func(void), and it conflicts
# with the builtin functions like fopen, etc.
$(FFI_EXPORTS_O): CFLAGS += -fno-builtin

clean:
	@rm -rf $(BUILD_DIR)
