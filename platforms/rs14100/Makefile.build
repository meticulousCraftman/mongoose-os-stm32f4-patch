MAKEFLAGS += --warn-undefined-variables
.DEFAULT_GOAL := all

.PHONY: all clean

ifdef MGOS_VARS_FILE
include $(MGOS_VARS_FILE)
endif

MGOS_ENABLE_DEBUG_UDP = 0

MGOS_PATH ?= ../../..

APP ?= mongoose-os
APP_PLATFORM = rs14100
APP_CFLAGS ?=
APP_EXTRA_SRCS ?=
FFI_SYMBOLS ?=

# List of app source files, globs are supported
APP_SOURCES ?=
# List of include dirs, in addition to dirs from APP_SOURCES
APP_INCLUDES ?=
# List of app files to put into the device's filesystem, globs are supported
APP_FS_FILES ?=
# List of static libs (.a) which are parts of the app
APP_BIN_LIBS ?=
# Extra parts to include in firmware
APP_EXTRA_FW_PARTS ?=
# Bootloader path
MGOS_BL_BIN ?= $(MGOS_PLATFORM_PATH)/bin/bootloader.bin
# Normally boot loader is not updated during OTA update.
# The firmware built with this flag set to true will, when used for OTA,
# will reflash the boot loader as well.
MGOS_UPDATE_BOOT_LOADER ?= false
# If enabled, produced image will also become the factory reset firmware.
MGOS_UPDATE_FACTORY_RESET_FW ?= false

MGOS_MG_NET_IF ?= MG_NET_IF_NULL

BUILD_LIB_NAME ?= lib.a

# Get list of dirs which contain sources and filesystem files
APP_SOURCE_DIRS = $(sort $(dir $(APP_SOURCES)))
APP_FS_DIRS = $(sort $(dir $(APP_FS_FILES)))

APP_PATH := $(CURDIR)
MGOS_PLATFORM_PATH ?= $(MGOS_PATH)/platforms/rs14100

RS14100_LIBC ?= -lc -lstdc++
RS14100_CFLAGS = -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 \
                 -DRS14100 -D__FPU_PRESENT=1 -D__MPU_PRESENT=1 \
                 -D__IOM=volatile -D__IM='volatile const' -D__OM=volatile \
                 -D__error_t_defined=1 \
                 -DMGOS_MAX_NUM_UARTS=4 -D_FILE_OFFSET_BITS=32 \
                 -include mgos_iram.h

# These save a few K of flash but break stack unwinding.
# -DROMDRIVER_PRESENT -DROM_WIRELESS

RS14100_IPATH =
RS14100_VPATH =
RS14100_SRCS =

MGOS_CFLAGS += -DMGOS_VFS_DEFINE_LIBC_REENT_API \
               -DMGOS_VFS_DEFINE_LIBC_DIR_API \
               -DMGOS_VFS_DEFINE_DIRENT

MGOS_DEBUG_UART ?= 1

include $(MGOS_PATH)/tools/mk/mgos_common.mk
include $(MGOS_PATH)/tools/mk/mgos_features.mk

BUILD_DIR ?= $(CURDIR)/.build
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/fw
GEN_DIR ?= $(BUILD_DIR)/gen

# Absolutize all paths which can be given by the caller
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
override BUILD_DIR := $(abspath $(BUILD_DIR))
override MGOS_BL_BIN := $(abspath $(MGOS_BL_BIN))

APP0_ELF = $(BUILD_DIR)/$(APP).0.elf
APP0_BIN = $(BUILD_DIR)/$(APP).0.bin
APP1_ELF = $(BUILD_DIR)/$(APP).1.elf
APP1_BIN = $(BUILD_DIR)/$(APP).1.bin
SRAM_BASE = 0x200000
RS14100_SRAM_SIZE ?= 0x20000
FLASH_BASE = 0x8000000
FLASH_SIZE ?= 0x400000
FLASH_SYS_RSV = 0x12000
APP_SLOT_SIZE ?= 0x100000
ifneq "$(MGOS_BL_BIN)" ""
FLASH_APP0_ADDR = 0x100000
FLASH_FS0_ADDR = 0x40000
FLASH_APP1_ADDR = 0x200000
FLASH_FS1_ADDR = 0x80000
FLASH_APPF_ADDR = 0x300000
FLASH_FSF_ADDR = 0xc0000
MGOS_CFLAGS += -DMGOS_BL_ENABLE
else
FLASH_APP0_ADDR = 0x12000
FLASH_FS0_ADDR = 0x300000
endif

MGOS_ROOT_DEVTAB ?= qspi0 rsi1x_flash {"cs": 0} | \
                    fs0   part        {"dev": "qspi0", "offset": $(FLASH_FS0_ADDR), "size": $(MGOS_ROOT_FS_SIZE)}
MGOS_ROOT_FS_TYPE ?= SPIFFS
MGOS_ROOT_FS_SIZE ?= 262144
FS_STAGING_DIR = $(BUILD_DIR)/fs

FS_IMG = $(FW_STAGING_DIR)/fs.bin
FS_ZIP = $(FW_STAGING_DIR)/fs.zip

FS_ZIP_C = $(GEN_DIR)/fs_zip.c

include $(MGOS_PATH)/tools/mk/mgos_mkfs.mk

MGOS_LIB = $(BUILD_DIR)/mongoose-os.a
BUILD_INFO_C = $(GEN_DIR)/build_info.c
BUILD_INFO_O = $(BUILD_DIR)/build_info.c.o
BUILD_INFO_JSON = $(GEN_DIR)/build_info.json
MG_BUILD_INFO_C = $(GEN_DIR)/mg_build_info.c
MG_BUILD_INFO_O = $(BUILD_DIR)/mg_build_info.c.o
MGOS_CONFIG_C = $(GEN_DIR)/mgos_config.c
MGOS_RO_VARS_C = $(GEN_DIR)/mgos_ro_vars.c
GENFILES_FLAG = $(GEN_DIR)/genfiles.done
GENFILES_LIST = $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C)
SYMBOLS_DUMP = $(GEN_DIR)/symbols_dump.txt
FFI_EXPORTS_C = $(GEN_DIR)/ffi_exports.c

MGOS_SRCS += $(notdir $(MGOS_CONFIG_C)) $(notdir $(MGOS_RO_VARS_C)) \
             mgos_config_util.c mgos_core_dump.c mgos_event.c mgos_gpio.c \
             mgos_hw_timers.c mgos_sys_config.c \
             mgos_time.c mgos_timers.c cs_crc32.c cs_file.c cs_hex.c \
             json_utils.c frozen.c mgos_uart.c cs_rbuf.c mgos_init.c \
             mgos_dlsym.c mgos_file_utils.c mgos_system.c mgos_utils.c \
             arm_exc_top.S arm_exc.c arm_nsleep100.c arm_nsleep100_m4.S \
             error_codes.cpp status.cpp
# Driver/Peripheral_Library/driver/src/*.c
MGOS_SRCS += clock_update.c rsi_adc.c rsi_cci.c rsi_comparator.c rsi_crc.c \
             rsi_ct.c rsi_cts.c rsi_dac.c rsi_efuse.c rsi_egpio.c rsi_ethernet.c \
             rsi_gpdma.c rsi_gspi.c rsi_ir.c \
             rsi_opamp.c rsi_pwm.c rsi_qei.c rsi_qspi.c rsi_rng.c \
             rsi_sio.c rsi_timers.c rsi_udma.c rsi_vad.c rsi_wurx.c
# rsi_sdioh.c - uses SysTick
# Driver/Peripheral_Library/systemlevel/src/*.c
MGOS_SRCS += rsi_bod.c rsi_ipmu.c rsi_pll.c rsi_power_save.c rsi_processor_sensor.c \
             rsi_rtc.c rsi_temp_sensor.c rsi_time_period.c rsi_ulpss_clk.c rsi_wwdt.c
MGOS_SRCS += rsi_apis_non_rom.c \
             rsi_apis_rom.c \
             rsi_bootup_config.c \
             rsi_common.c \
             rsi_common_apis.c \
             rsi_device_init.c \
             rsi_device_init_apis.c \
             rsi_driver_event_handlers.c \
             rsi_events.c \
             rsi_events_rom.c \
             rsi_hal_mcu_m4.c \
             rsi_hal_mcu_m4_rom.c \
             rsi_nwk.c \
             rsi_nwk_rom.c \
             rsi_os_wrapper.c \
             rsi_pkt_mgmt.c \
             rsi_pkt_mgmt_rom.c \
             rsi_queue.c \
             rsi_queue_rom.c \
             rsi_scheduler.c \
             rsi_scheduler_rom.c \
             rsi_scheduler.c \
             rsi_utils.c \
             rsi_utils_rom.c \
             rsi_wlan.c \
             rsi_wlan_apis.c

MGOS_SRCS += system_RS1xxxx.c rsi_system_config.c \
             rs14100_entry.c rs14100_gpio.c rs14100_hal.c rs14100_libc.c rs14100_main.c \
             rs14100_uart.c rs14100_wdt.c

RS14100_IPATH += $(RS14100_SDK_PATH) \
                 $(RS14100_SDK_PATH)/Common/chip/inc \
                 $(RS14100_SDK_PATH)/Common/cmsis \
                 $(RS14100_SDK_PATH)/Peripheral_Library/driver/inc \
                 $(RS14100_SDK_PATH)/Peripheral_Library/rom_driver/inc \
                 $(RS14100_SDK_PATH)/Peripheral_Library/systemlevel/inc \
                 $(RS14100_SDK_PATH)/Wireless_Library/hal_WiSeMcu/inc \
                 $(RS14100_SDK_PATH)/Wireless_Library/include \
                 $(RS14100_SDK_PATH)/Wireless_Library/rom

RS14100_VPATH += $(RS14100_SDK_PATH)/Common/chip/src \
                 $(RS14100_SDK_PATH)/Peripheral_Library/driver/src \
                 $(RS14100_SDK_PATH)/Peripheral_Library/systemlevel/src \
                 $(RS14100_SDK_PATH)/Wireless_Library/common \
                 $(RS14100_SDK_PATH)/Wireless_Library/driver \
                 $(RS14100_SDK_PATH)/Wireless_Library/hal_WiSeMcu/src \
                 $(RS14100_SDK_PATH)/Wireless_Library/os/free_rtos \
                 $(RS14100_SDK_PATH)/Wireless_Library/rom \
                 $(RS14100_SDK_PATH)/Wireless_Library/wlan

RS14100_CFLAGS += -DSRAM_BASE=$(SRAM_BASE) -DSRAM_BASE_ADDR=$(SRAM_BASE) -DSRAM_SIZE=$(RS14100_SRAM_SIZE) \
                  -DMGOS_ROOT_DEVTAB='$(MGOS_ROOT_DEVTAB)' \
                  -DMGOS_ROOT_FS_TYPE='$(MGOS_ROOT_FS_TYPE)' \
                  -DMGOS_ROOT_FS_OPTS='$(MGOS_ROOT_FS_OPTS)' \
                  -DMG_LOCALS -DCS_PLATFORM=CS_P_RS14100 \
                  -DMGOS_NUM_HW_TIMERS=0 \
                  -DRSI_SAMPLE_HAL -DRSI_WLAN_ENABLE -DRSI_M4_INTERFACE -DRSI_LITTLE_ENDIAN \
                  -DRSI_WITH_OS -DBOOTLOADER_VERSION_CHECK=0

IPATH = $(sort $(APP_SOURCE_DIRS) $(APP_INCLUDES)) \
        $(MGOS_PLATFORM_PATH)/include $(MGOS_IPATH) $(GEN_DIR) $(RS14100_IPATH)

VPATH = $(MGOS_VPATH) $(MGOS_PLATFORM_PATH)/src \
        $(GEN_DIR) $(APP_SOURCE_DIRS) $(RS14100_VPATH)

APP_SRCS := $(notdir $(foreach m,$(APP_SOURCES),$(wildcard $(m)))) $(APP_EXTRA_SRCS)
APP_BIN_LIB_FILES := $(foreach m,$(APP_BIN_LIBS),$(wildcard $(m)))

C_CXX_FLAGS = -Os -ggdb -MD -Wall -Wextra -Werror -Wundef -pipe \
              -fno-common -ffunction-sections -fdata-sections \
              -DMGOS_APP=\"$(APP)\" \
              -DFW_ARCHITECTURE=$(APP_PLATFORM) \
              $(MGOS_CFLAGS) $(MGOS_FEATURES) \
              $(MG_FEATURES_TINY) -DMG_ENABLE_DIRECTORY_LISTING \
              -DMG_NET_IF=$(MGOS_MG_NET_IF) \
              $(RS14100_CFLAGS)

CFLAGS = -std=gnu99 $(C_CXX_FLAGS) $(APP_CFLAGS)
CXXFLAGS = -std=gnu++11 -fno-exceptions $(C_CXX_FLAGS) $(APP_CXXFLAGS)

LDFLAGS += -Wl,--defsym=SRAM_BASE=$(SRAM_BASE) -Wl,--defsym=SRAM_SIZE=$(RS14100_SRAM_SIZE) \
           -Wl,--defsym=FLASH_BASE=$(FLASH_BASE) -Wl,--defsym=FLASH_SIZE=$(FLASH_SIZE) \
           -Wl,--defsym=FLASH_APP_SIZE=$(APP_SLOT_SIZE)
LDFLAGS += -Wl,--gc-sections

FW_PARTS =

ifneq "$(MGOS_BL_BIN)" ""
FW_PARTS += boot:type=boot,src=$(MGOS_BL_BIN),addr=0x12000,update=$(MGOS_UPDATE_BOOT_LOADER) \
            bcfg0:type=bootcfg,addr=0x1e000,size=0x1000,fill=0xff \
            bcfg1:type=bootcfg,addr=0x1f000,size=0x1000,fill=0xff
endif

FW_PARTS += app0:type=app,src=$(APP0_BIN),addr=$(FLASH_APP0_ADDR)
ifneq "$(MGOS_ROOT_FS_SIZE)" "0"
FW_PARTS += fs:type=fs,src=$(FS_IMG),addr=$(FLASH_FS0_ADDR)
endif

ifneq "$(MGOS_BL_BIN)" ""
FW_PARTS += app1:type=app,src=$(APP1_BIN),addr=$(FLASH_APP1_ADDR),flash=false
endif

ifeq "$(MGOS_UPDATE_FACTORY_RESET_FW)" "true"
FW_PARTS += appF:type=app,src=$(APP0_BIN),addr=$(FLASH_APPF_ADDR),update=true
ifneq "$(MGOS_ROOT_FS_SIZE)" "0"
FW_PARTS += fsF:type=fs,src=$(FS_IMG),addr=$(FLASH_FSF_ADDR),update=true
endif
endif

FW_PARTS += $(APP_EXTRA_FW_PARTS)

LD_SCRIPT ?= $(MGOS_PLATFORM_PATH)/ld/rs14100.ld

MGOS_OBJS = $(addprefix $(BUILD_DIR)/,$(MGOS_SRCS:=.o))
RS14100_OBJS = $(addprefix $(BUILD_DIR)/,$(RS14100_SRCS:=.o))
APP_OBJS = $(addprefix $(BUILD_DIR)/,$(APP_SRCS:=.o))
FFI_EXPORTS_O = $(addprefix $(BUILD_DIR)/,$(notdir $(FFI_EXPORTS_C:=.o)))

include $(MGOS_PATH)/tools/mk/mgos_fw_meta.mk

AR = arm-none-eabi-ar
CC = arm-none-eabi-gcc
CXX = arm-none-eabi-g++
NM = arm-none-eabi-nm
OC = arm-none-eabi-objcopy

all: $(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR) $(APP0_BIN) $(FW_ZIP)

$(FW_MANIFEST): $(APP0_BIN) $(MGOS_CONFIG_C) $(BUILD_INFO_C) $(MG_BUILD_INFO_C)
ifneq "$(MGOS_ROOT_FS_SIZE)" "0"
$(FW_MANIFEST): $(FS_IMG)
endif
ifneq "$(MGOS_BL_BIN)" ""
$(FW_MANIFEST): $(APP1_BIN)
endif

$(BUILD_DIR) $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR):
	$(vecho) "MKDIR $@"
	$(Q) mkdir -p $@

$(MGOS_LIB): $(MGOS_OBJS)
	$(vecho) "AR    $@"
	$(Q) $(AR) cru $@ $^

# lib.a, used during lib release build.
$(BUILD_DIR)/$(BUILD_LIB_NAME): $(BUILD_DIR) $(APP_OBJS)
	$(vecho) "AR    $@"
	$(AR) cru $@ $(APP_OBJS)

$(BUILD_DIR)/%.c.o: %.c $(GENFILES_FLAG)
	$(vecho) "CC    $<"
	$(Q) cd $(dir $<) && $(CC) $(CFLAGS) $(addprefix -I, $(IPATH)) -c $< -o $@

$(BUILD_DIR)/%.cpp.o: %.cpp $(GENFILES_FLAG)
	$(vecho) "CXX   $<"
	$(Q) cd $(dir $<) && $(CXX) $(CXXFLAGS) $(addprefix -I, $(IPATH)) -c $(notdir $<) -o $@

$(BUILD_DIR)/%.S.o: %.S $(GENFILES_FLAG)
	$(vecho) "ASM   $<"
	$(Q) $(CC) $(CFLAGS) $(addprefix -I, $(IPATH)) -c -x assembler-with-cpp $< -o $@

$(GENFILES_FLAG): $(GENFILES_LIST)
	$(Q) touch $@

BIN_PARTS = $(APP_OBJS) $(FFI_EXPORTS_O) $(BUILD_INFO_O) $(MG_BUILD_INFO_O) $(MGOS_LIB) $(RS14100_OBJS) $(APP_BIN_LIB_FILES)

# link objs,script,offset
define link
	$(vecho) "LD    $@ ($3)"
	$(Q) $(CC) $(CFLAGS) $(LDFLAGS) \
	  -Wl,--defsym=FLASH_APP_OFFSET=$3 \
	  -Wl,-Map=$@.map -Wl,--start-group $1 $(RS14100_LIBC) -lgcc -lnosys -Wl,--end-group \
	  -T$2 -o $@
endef

$(APP0_ELF): $(BIN_PARTS) $(LD_SCRIPT)
	$(call link,$(BIN_PARTS),$(LD_SCRIPT),$(FLASH_APP0_ADDR))

$(APP1_ELF): $(BIN_PARTS) $(LD_SCRIPT)
	$(call link,$(BIN_PARTS),$(LD_SCRIPT),$(FLASH_APP1_ADDR))

define objcopy
	$(vecho) "BIN   $@"
	$(Q) $(OC) -Obinary -R .boot_state $^ $@
endef

$(APP0_BIN): $(APP0_ELF)
	$(call objcopy)
	$(vecho) "  Size: $$(ls -l -1 $@ | cut -d ' ' -f 5)"
	$(vecho) "    Code: $$($(OC) -Obinary -j .text $^ /dev/fd/1 | wc -c)"
	$(vecho) "    Data: $$($(OC) -Obinary -j .rodata $^ /dev/fd/1 | wc -c) + $$($(OC) -Obinary -j .data $^ /dev/fd/1 | wc -c)"

$(APP1_BIN): $(APP1_ELF)
	$(call objcopy)

include $(MGOS_PATH)/tools/mk/mgos_build_info.mk
include $(MGOS_PATH)/tools/mk/mgos_ffi_exports.mk
include $(MGOS_PATH)/tools/mk/mgos_config.mk

$(BUILD_INFO_C) $(BUILD_INFO_JSON): $(APP_OBJS) $(MGOS_OBJS) $(FFI_EXPORTS_O)
	$(call gen_build_info,$@,$(APP_PATH),$(APP_BUILD_ID),$(APP_VERSION),,$(BUILD_INFO_C),$(BUILD_INFO_JSON))

$(MG_BUILD_INFO_C): $(MGOS_OBJS)
	$(call gen_build_info,$@,$(MGOS_PATH)/fw,,,mg_,$(MG_BUILD_INFO_C),)

$(MGOS_CONFIG_C): $(MGOS_CONF_SCHEMA) $(MANIFEST_FINAL)

$(FS_IMG): $(APP_FS_DIRS) $(FS_FILES) $(MGOS_CONFIG_C) $(MGOS_RO_VARS_C) $(MKFS)
	$(call mkfs,$(MGOS_ROOT_FS_SIZE),$(MGOS_ROOT_FS_OPTS))

$(FFI_EXPORTS_C): $(FS_FILES)
	$(call gen_ffi_exports,$@,$(FFI_SYMBOLS),$(filter %.js,$(FS_FILES)))

# In ffi exports file we use fake signatures: void func(void), and it conflicts
# with the builtin functions like fopen, etc.
$(FFI_EXPORTS_O): CFLAGS += -fno-builtin

# Pull in auto-generated .c dependencies (if any).
-include $(wildcard $(BUILD_DIR)/*.d)

clean:
	@rm -rf $(BUILD_DIR)
